
import fs from "fs";
import axios from "axios";
import sharp from "sharp";
import FormData from "form-data";
import { uploadBlobToIPFS ,  uploadJSONToIPFS } from "./uploadToIpfs";
import { IpMetadata, LicenseTerms } from "@story-protocol/core-sdk";
import { client, account } from "./utils";
import { createHash } from "crypto";
import { zeroAddress, Address } from "viem";

// Define the addresses for RoyaltyPolicyLAP and SUSD
const RoyaltyPolicyLAP: Address = "0x28b4F70ffE5ba7A26aEF979226f77Eb57fb9Fdb6";
const SUSD: Address = "0xC0F6E387aC0B324Ec18EAcf22EE7271207dCE3d5";

async function main() {
  try {
    // Step 1: Generate the image
    const payload = {
      prompt: "Lighthouse on a cliff overlooking the ocean",
      output_format: "png",
    };

    const response = await axios.post(
      `https://api.stability.ai/v2beta/stable-image/generate/core`,
      payload,
      {
        headers: {
          Authorization: `Bearer ${process.env.STABILITY_API_KEY}`,
          Accept: "image/*",
        },
        responseType: "arraybuffer",
      }
    );

    // Step 2: Optimize the image
    const condensedImgBuffer = await sharp(response.data)
      .png({ quality: 10 }) // Adjust the quality value as needed (between 0 and 100)
      .toBuffer();

    // Step 3: Upload blob to IPFS
    const blob = new Blob([condensedImgBuffer], { type: "image/png" });
    const imageCid = await uploadBlobToIPFS(blob, "lighthouse.png");

    // Step 4: Set IP metadata
    const ipMetadata: IpMetadata = client.ipAsset.generateIpMetadata({
      title: "Lighthouse",
      description: "A lighthouse image generated by Stability Stable Image Core",
      ipType: "image",
      attributes: [
        { key: "Model", value: "Stability" },
        { key: "Service", value: "Stable Image Core" },
        { key: "Prompt", value: "Lighthouse on a cliff overlooking the ocean" },
      ],
      creators: [
        {
          name: "Jacob Tucker",
          contributionPercent: 100,
          address: account.address,
        },
      ],
    });

    // Step 5: Setup NFT metadata
    const nftMetadata = {
      name: "Ownership NFT",
      description: "This NFT represents ownership of the image generated by Stability",
      image: `${process.env.PINATA_GATEWAY}/files/${imageCid}`,
      attributes: [
        { key: "Model", value: "Stability" },
        { key: "Service", value: "Stable Image Core" },
        { key: "Prompt", value: "Lighthouse on a cliff overlooking the ocean" },
      ],
    };

    // Step 6: Upload metadata to IPFS
    const ipIpfsHash = await uploadJSONToIPFS(ipMetadata);
    const ipHash = createHash("sha256").update(JSON.stringify(ipMetadata)).digest("hex");
    const nftIpfsHash = await uploadJSONToIPFS(nftMetadata);
    const nftHash = createHash("sha256").update(JSON.stringify(nftMetadata)).digest("hex");

    // Step 7: Create license terms
    const commercialRemixTerms: LicenseTerms = {
      transferable: true,
      royaltyPolicy: RoyaltyPolicyLAP, //0x28b4F70ffE5ba7A26aEF979226f77Eb57fb9Fdb6
      defaultMintingFee: BigInt(10),
      expiration: BigInt(0),
      commercialUse: true,
      commercialAttribution: true,
      commercializerChecker: zeroAddress,
      commercializerCheckerData: zeroAddress,
      commercialRevShare: 5,
      commercialRevCeiling: BigInt(0),
      derivativesAllowed: true,
      derivativesAttribution: true,
      derivativesApproval: false,
      derivativesReciprocal: true,
      derivativeRevCeiling: BigInt(0),
      currency: SUSD,
      uri: "",
    };

    // Step 8: Register the NFT as an IP asset
    const responseRegister = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({
      spgNftContract: process.env.SPG_NFT_CONTRACT_ADDRESS as Address,
      terms: [commercialRemixTerms],
      ipMetadata: {
        ipMetadataURI: `${process.env.PINATA_GATEWAY}/files/${ipIpfsHash}`,
        ipMetadataHash: `0x${ipHash}`,
        nftMetadataURI: `${process.env.PINATA_GATEWAY}/files/${nftIpfsHash}`,
        nftMetadataHash: `0x${nftHash}`,
      },
      txOptions: { waitForTransaction: true },
    });

    console.log(`Root IPA created at transaction hash ${responseRegister.txHash}, IPA ID: ${responseRegister.ipId}`);
    console.log(`View on the explorer: https://explorer.story.foundation/ipa/${responseRegister.ipId}`);
  } catch (error) {
    console.error("Error during execution:", error);
  }
}

main();


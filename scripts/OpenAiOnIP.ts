import * as dotenv from "dotenv";
dotenv.config();

import OpenAI from "openai";
import { IpMetadata } from "@story-protocol/core-sdk";
import { client, account } from "./utils";
import { uploadJSONToIPFS } from "./utils/uploadToIpfs";
import { createHash } from "crypto";
import { Address } from "viem";

async function main() {
  try {
    // 1. Generate Image
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const image = await openai.images.generate({
      model: "dall-e-2",
      prompt: "A white cute cat",
    });

    const imageUrl = image.data[0].url;
    console.log(`Generated Image URL: ${imageUrl}`);

    // 2. Set IP Metadata
    const ipMetadata: IpMetadata = client.ipAsset.generateIpMetadata({
      title: "Dall-E 2 Image",
      description: "An image generated by Dall-E 2",
      ipType: "image",
      attributes: [
        { key: "Model", value: "dall-e-2" },
        { key: "Prompt", value: "A White cat" },
      ],
      creators: [
        {
          name: "0xGareeb",
          contributionPercent: 100,
          address: account.address,
        },
      ],
    });

    // 3. Set NFT Metadata
    const nftMetadata = {
      name: "Image Ownership NFT",
      description: "This NFT represents ownership of the image generated by Dall-E 2",
      image: imageUrl,
      attributes: [
        { key: "Model", value: "dall-e-2" },
        { key: "Prompt", value: "A white cute cat" },
      ],
    };

    // 4. Upload Metadata to IPFS
    const ipIpfsHash = await uploadJSONToIPFS(ipMetadata);
    const ipHash = createHash("sha256").update(JSON.stringify(ipMetadata)).digest("hex");

    const nftIpfsHash = await uploadJSONToIPFS(nftMetadata);
    const nftHash = createHash("sha256").update(JSON.stringify(nftMetadata)).digest("hex");

    console.log(`IPFS Metadata Uploaded:
      IP Metadata URI: https://ipfs.io/ipfs/${ipIpfsHash}
      NFT Metadata URI: https://ipfs.io/ipfs/${nftIpfsHash}
    `);

    // 5. Register the NFT as an IP Asset
    const response = await client.ipAsset.mintAndRegisterIpAssetWithPilTerms({
      spgNftContract: process.env.SPG_NFT_CONTRACT_ADDRESS as Address,
      terms: [], // Add valid terms here if needed
      ipMetadata: {
        ipMetadataURI: `https://ipfs.io/ipfs/${ipIpfsHash}`,
        ipMetadataHash: `0x${ipHash}`,
        nftMetadataURI: `https://ipfs.io/ipfs/${nftIpfsHash}`,
        nftMetadataHash: `0x${nftHash}`,
      },
      txOptions: { waitForTransaction: true },
    });

    console.log(
      `Root IPA created at transaction hash ${response.txHash}, IPA ID: ${response.ipId}`
    );
    console.log(
      `View on the explorer: https://explorer.story.foundation/ipa/${response.ipId}`
    );
  } catch (error) {
    console.error("An error occurred:", error);
  }
}

main();
